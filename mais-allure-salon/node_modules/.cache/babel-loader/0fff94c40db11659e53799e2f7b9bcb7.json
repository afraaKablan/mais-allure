{"ast":null,"code":"import React, { Component } from 'react';\nimport { Typography, Table, TableBody, TableCell, TableRow, Card, CardActionArea, CardContent, TableHead, createMuiTheme, Paper, Button, IconButton, MuiThemeProvider } from '@material-ui/core';\nimport { teal, orange, red } from '@material-ui/core/colors';\nimport ChevronLeftRounded from '@material-ui/icons/ChevronLeftRounded';\nimport ChevronRightRounded from '@material-ui/icons/ChevronRightRounded';\n\nvar DisplayMonthlyCalendar = function DisplayMonthlyCalendar(props) {\n  var today = new Date();\n  var currentMonth = dateFns.getMonth(today);\n  /**\r\n   * If the month being displayed is the same as current month, highlight it with a gray box.\r\n   * @param {*} currentMonthCounter\r\n   */\n\n  var ifSameMonthCard = function ifSameMonthCard(currentMonthCounter) {\n    if (currentMonth === currentMonthCounter) {\n      return {\n        backgroundColor: \"rgba(128,128,128,0.5)\",\n        height: \"100%\"\n      };\n    } else {\n      return {\n        backgroundColor: \"rgba(0,0,0,0)\",\n        height: \"100%\"\n      };\n    }\n  };\n\n  var months = [{\n    id: 0,\n    name: \"Jan\"\n  }, {\n    id: 1,\n    name: \"Feb\"\n  }, {\n    id: 2,\n    name: \"Mar\"\n  }, {\n    id: 3,\n    name: \"Apr\"\n  }, {\n    id: 4,\n    name: \"May\"\n  }, {\n    id: 5,\n    name: \"Jun\"\n  }, {\n    id: 6,\n    name: \"Jul\"\n  }, {\n    id: 7,\n    name: \"Aug\"\n  }, {\n    id: 8,\n    name: \"Sep\"\n  }, {\n    id: 9,\n    name: \"Oct\"\n  }, {\n    id: 10,\n    name: \"Nov\"\n  }, {\n    id: 11,\n    name: \"Dec\"\n  }];\n  var rowsOfMonths = [];\n  var rows = [];\n  var monthCounter = 0;\n  var rowCounter = 0;\n\n  while (monthCounter < 12) {\n    var _loop = function _loop(i) {\n      var monthID = months[monthCounter].id;\n      rowsOfMonths.push(React.createElement(TableCell, {\n        key: monthID\n      }, React.createElement(CardActionArea, {\n        onClick: function onClick() {\n          return props.onSetMonth(monthID);\n        },\n        style: {\n          height: \"100%\"\n        }\n      }, React.createElement(Card, {\n        style: ifSameMonthCard(monthCounter)\n      }, React.createElement(CardContent, null, React.createElement(Typography, {\n        align: \"center\",\n        style: props.textColor\n      }, months[monthCounter].name))))));\n      monthCounter += 1;\n    };\n\n    for (var i = 0; i < 3; i++) {\n      _loop(i);\n    }\n\n    rows.push(React.createElement(TableRow, {\n      key: rowCounter,\n      style: {\n        height: \"25%\"\n      }\n    }, rowsOfMonths));\n    rowsOfMonths = [];\n    rowCounter += 1;\n  }\n\n  return React.createElement(Table, {\n    style: {\n      height: \"90%\"\n    }\n  }, React.createElement(TableBody, null, rows));\n};\n\nvar DisplayDailyCalendar = function DisplayDailyCalendar(props) {\n  var today = new Date();\n  var selectedDate = props.selectedDate;\n  var monthStart = dateFns.startOfMonth(selectedDate);\n  var monthEnd = dateFns.endOfMonth(monthStart);\n  var startDate = dateFns.startOfWeek(monthStart);\n  var endDate = dateFns.endOfWeek(monthEnd);\n  var weekdays = [{\n    id: 0,\n    day: \"Sun\"\n  }, {\n    id: 1,\n    day: \"Mon\"\n  }, {\n    id: 2,\n    day: \"Tue\"\n  }, {\n    id: 3,\n    day: \"Wed\"\n  }, {\n    id: 4,\n    day: \"Thu\"\n  }, {\n    id: 5,\n    day: \"Fri\"\n  }, {\n    id: 6,\n    day: \"Sat\"\n  }];\n  var eachWeek = [];\n  var daysOfWeek = [];\n  var day = startDate;\n  var end = endDate;\n  var formattedDate = void 0;\n  var dateFormat = \"D\";\n  var weekNumber = 1;\n\n  while (day <= end) {\n    var _loop = function _loop(i) {\n      formattedDate = dateFns.format(day, dateFormat);\n      var cloneDay = day;\n      daysOfWeek.push(React.createElement(TableCell, {\n        key: formattedDate\n      }, React.createElement(CardActionArea, {\n        onClick: function onClick() {\n          return props.onDateClick(dateFns.parse(cloneDay));\n        },\n        style: {\n          height: \"100%\"\n        }\n      }, React.createElement(Card, {\n        style: dateFns.isSameDay(day, selectedDate) ? {\n          backgroundColor: \"rgba(128,128,128,0.5)\",\n          height: \"100%\"\n        } : {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          height: \"100%\"\n        }\n      }, React.createElement(CardContent, null, dateFns.isSameDay(day, today) ? React.createElement(Typography, {\n        align: \"center\",\n        color: \"primary\",\n        style: {\n          fontSize: \"20px\"\n        }\n      }, formattedDate) : React.createElement(Typography, {\n        align: \"center\",\n        style: dateFns.isSameMonth(day, monthStart) ? props.textColor : {\n          color: \"rgba(128,128,128,1)\"\n        }\n      }, formattedDate))))));\n      day = dateFns.addDays(day, 1);\n    };\n\n    for (var i = 0; i < 7; i++) {\n      _loop(i);\n    }\n\n    eachWeek.push(React.createElement(TableRow, {\n      key: weekNumber\n    }, daysOfWeek));\n    daysOfWeek = [];\n    weekNumber += 1;\n  }\n\n  return React.createElement(Table, {\n    style: {\n      height: \"90%\"\n    }\n  }, React.createElement(TableHead, null, React.createElement(TableRow, null, weekdays.map(function (day) {\n    return React.createElement(TableCell, {\n      key: day.id\n    }, React.createElement(Typography, {\n      align: \"center\"\n    }, day.day));\n  }))), React.createElement(TableBody, null, eachWeek));\n};\n\nvar DisplayYearlyCalendar = function DisplayYearlyCalendar(props) {\n  var today = new Date();\n  var currentYearDateFNS = dateFns.getYear(today);\n  var dateYearFormat = \"YYYY\";\n  var pastYears = dateFns.addYears(props.year, -9);\n  var futureYears = dateFns.addYears(props.year, 2);\n  var yearStart = parseInt(dateFns.format(pastYears, dateYearFormat));\n  var yearEnd = parseInt(dateFns.format(futureYears, dateYearFormat));\n  var rowsOfYears = [];\n  var rows = [];\n  var rowCounter = 0;\n  /**\r\n   * If the month being displayed is the same as current month, highlight it with a gray box.\r\n   */\n\n  var ifSameCurrentYearCard = function ifSameCurrentYearCard(currentYearCounter) {\n    if (currentYearDateFNS === currentYearCounter) {\n      return {\n        backgroundColor: \"rgba(128,128,128,0.5)\",\n        height: \"100%\"\n      };\n    } else {\n      return {\n        backgroundColor: \"rgba(0,0,0,0)\",\n        height: \"100%\"\n      };\n    }\n  };\n\n  var currentYear = yearStart;\n\n  while (currentYear < yearEnd + 1) {\n    var _loop = function _loop(i) {\n      var cloneCurrentYear = currentYear;\n      rowsOfYears.push(React.createElement(TableCell, {\n        key: currentYear\n      }, React.createElement(CardActionArea, {\n        style: {\n          height: \"100%\"\n        },\n        onClick: function onClick() {\n          return props.onSetYear(cloneCurrentYear);\n        }\n      }, React.createElement(Card, {\n        style: ifSameCurrentYearCard(cloneCurrentYear)\n      }, React.createElement(CardContent, null, React.createElement(Typography, {\n        align: \"center\",\n        style: props.textColor\n      }, currentYear))))));\n      currentYear += 1;\n    };\n\n    for (var i = 0; i < 3; i++) {\n      _loop(i);\n    }\n\n    rows.push(React.createElement(TableRow, {\n      key: rowCounter,\n      style: {\n        height: \"25%\"\n      }\n    }, rowsOfYears));\n    rowsOfYears = [];\n    rowCounter += 1;\n  }\n\n  return React.createElement(Table, {\n    style: {\n      height: \"90%\"\n    }\n  }, React.createElement(TableBody, null, rows));\n}; //Material theme\n\n\nvar darkTheme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: {\n      main: teal[\"A100\"]\n    },\n    secondary: {\n      main: orange[\"A100\"],\n      light: orange[500]\n    },\n    caution: {\n      main: red[500]\n    },\n    type: \"dark\"\n  }\n});\nvar lightTheme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: {\n      main: teal[\"A100\"]\n    },\n    secondary: {\n      main: orange[\"A100\"],\n      light: orange[500]\n    },\n    caution: {\n      main: red[500]\n    },\n    type: \"light\"\n  }\n}); //export default theme;\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar Calendar = function (_Component) {\n  inherits(Calendar, _Component);\n\n  function Calendar() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, Calendar);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      selectedDate: new Date(),\n      selectedMonth: new Date(),\n      mode: 0,\n      showFunctionalHeader: true,\n      selectStartandEnd: false,\n      selected1: null,\n      selected2: null,\n      functionalMode: false\n    }, _this.renderHeader = function () {\n      var dateYearFormat = \"YYYY\";\n      var dateMonthFormat = \"MMMM YYYY\";\n      var header = void 0;\n\n      if (_this.state.mode === 0) {\n        header = React.createElement(Typography, {\n          variant: \"h5\",\n          inline: true\n        }, dateFns.format(_this.state.selectedDate, dateMonthFormat));\n      } else if (_this.state.mode === 1) {\n        header = React.createElement(Typography, {\n          variant: \"h5\",\n          inline: true\n        }, dateFns.format(_this.state.selectedDate, dateYearFormat));\n      } else {\n        var pastFiveYears = dateFns.addYears(_this.state.selectedDate, -9);\n        var nextFiveYears = dateFns.addYears(_this.state.selectedDate, 2);\n        header = React.createElement(Typography, {\n          variant: \"h5\",\n          inline: true\n        }, dateFns.format(pastFiveYears, dateYearFormat), \" -\", \" \", dateFns.format(nextFiveYears, dateYearFormat));\n      }\n\n      return React.createElement(Paper, {\n        style: {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }\n      }, React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.onChevronClick(true);\n        }\n      }, React.createElement(ChevronLeftRounded, null)), React.createElement(Button, {\n        onClick: _this.modeChange\n      }, header), React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.onChevronClick(false);\n        }\n      }, React.createElement(ChevronRightRounded, null)));\n    }, _this.renderYearHeader = function () {\n      var dateYearFormat = \"YYYY\";\n      var header = void 0;\n      var pastFiveYears = dateFns.addYears(_this.state.selectedDate, -9);\n      var nextFiveYears = dateFns.addYears(_this.state.selectedDate, 2);\n      header = React.createElement(Typography, {\n        variant: \"h5\",\n        inline: true\n      }, dateFns.format(pastFiveYears, dateYearFormat), \" -\", \" \", dateFns.format(nextFiveYears, dateYearFormat));\n      return React.createElement(Paper, {\n        style: {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }\n      }, React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.yearChevronClick(true);\n        }\n      }, React.createElement(ChevronLeftRounded, null)), header, React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.yearChevronClick(false);\n        }\n      }, React.createElement(ChevronRightRounded, null)));\n    }, _this.modeChange = function () {\n      if (_this.state.mode === 0) {\n        _this.setState({\n          mode: 1\n        });\n      } else if (_this.state.mode === 1) {\n        _this.setState({\n          mode: 2,\n          selectedDate: new Date()\n        });\n      } else {\n        _this.setState({\n          mode: 0,\n          selectedDate: new Date()\n        });\n      }\n    }, _this.onChevronClick = function (direction) {\n      if (direction) {\n        if (_this.state.mode === 0) {\n          _this.setState({\n            selectedDate: dateFns.addMonths(_this.state.selectedDate, -1)\n          });\n        } else if (_this.state.mode === 1) {\n          _this.setState({\n            selectedDate: dateFns.addYears(_this.state.selectedDate, -1)\n          });\n        } else {\n          _this.setState({\n            selectedDate: dateFns.addYears(_this.state.selectedDate, -9)\n          });\n        }\n      } else {\n        if (_this.state.mode === 0) {\n          _this.setState({\n            selectedDate: dateFns.addMonths(_this.state.selectedDate, 1)\n          });\n        } else if (_this.state.mode === 1) {\n          _this.setState({\n            selectedDate: dateFns.addYears(_this.state.selectedDate, 1)\n          });\n        } else {\n          _this.setState({\n            selectedDate: dateFns.addYears(_this.state.selectedDate, 9)\n          });\n        }\n      }\n    }, _this.yearChevronClick = function (direction) {\n      if (direction) {\n        _this.setState({\n          selectedDate: dateFns.addYears(_this.state.selectedDate, -9)\n        });\n      } else {\n        _this.setState({\n          selectedDate: dateFns.addYears(_this.state.selectedDate, 9)\n        });\n      }\n    }, _this.onDateClick = function (day) {\n      _this.setState({\n        selectedDate: day\n      }); //This is for returning date when publishing\n\n\n      if (_this.props.selection !== undefined && _this.props.mode !== \"month\" && _this.props.mode !== \"year\") {\n        _this.props.selection(day);\n      }\n    }, _this.onSetMonth = function (value) {\n      if (_this.props.selection !== undefined && _this.props.mode === \"month\") {\n        _this.props.selection(value);\n      } else {\n        var result = dateFns.setMonth(_this.state.selectedDate, value);\n\n        _this.setState({\n          selectedDate: result,\n          mode: 0\n        });\n      }\n    }, _this.onYearClick = function (value) {\n      if (_this.props.selection !== undefined && _this.props.mode === \"year\") {\n        _this.props.selection(value);\n      } else {\n        _this.setState({\n          mode: 1,\n          selectedDate: dateFns.setYear(_this.state.selectedDate, value)\n        });\n      }\n    }, _this.defaultDaySelector = function () {\n      var textColor = void 0;\n\n      if (_this.props.light) {\n        textColor = {\n          color: \"rgba(0,0,0,1)\"\n        };\n      } else {\n        textColor = {\n          color: \"rgba(256,256,256,1)\"\n        };\n      }\n\n      var body = void 0;\n\n      if (_this.state.mode === 0) {\n        body = React.createElement(DisplayDailyCalendar, {\n          selectedDate: _this.state.selectedDate,\n          onDateClick: _this.onDateClick,\n          light: textColor\n        });\n      } else if (_this.state.mode === 1) {\n        body = React.createElement(DisplayMonthlyCalendar, {\n          onSetMonth: _this.onSetMonth,\n          light: textColor\n        });\n      } else {\n        body = React.createElement(DisplayYearlyCalendar, {\n          year: _this.state.selectedDate,\n          onSetYear: _this.onYearClick,\n          light: textColor\n        });\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        }\n      }, _this.renderHeader(), body);\n    }, _this.monthSelector = function () {\n      var textColor = void 0;\n\n      if (_this.props.light) {\n        textColor = {\n          color: \"rgba(0,0,0,1)\"\n        };\n      } else {\n        textColor = {\n          color: \"rgba(256,256,256,1)\"\n        };\n      }\n\n      return React.createElement(DisplayMonthlyCalendar, {\n        onSetMonth: _this.onSetMonth,\n        light: textColor\n      });\n    }, _this.yearSelector = function () {\n      var textColor = void 0;\n\n      if (_this.props.light) {\n        textColor = {\n          color: \"rgba(0,0,0,1)\"\n        };\n      } else {\n        textColor = {\n          color: \"rgba(256,256,256,1)\"\n        };\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        }\n      }, _this.renderYearHeader(), React.createElement(DisplayYearlyCalendar, {\n        year: _this.state.selectedDate,\n        onSetYear: _this.onYearClick,\n        light: textColor\n      }));\n    }, _this.modeSelector = function () {\n      if (_this.props.mode === \"year\") {\n        return _this.yearSelector();\n      } else if (_this.props.mode === \"month\") {\n        return _this.monthSelector();\n      } else {\n        return _this.defaultDaySelector();\n      }\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n  /***************************************************************************************\n   * Calender Header functions\n   ***************************************************************************************/\n\n  /**\n   * Depending on the mode, the calendar header will render different text.\n   */\n\n  /**\n   * Render the header but without mode change.\n   */\n\n  /*\n   * Clicking on the header will change the mode between days, months and years.\n   */\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n\n  /***************************************************************************************\n   * Calendar functions (on click)\n   ***************************************************************************************/\n\n  /**\n   * Clicking on a date in mode 0 (Day calendar mode)\n   */\n\n  /**\n   * Clicking on a month in mode 1 will set the month and return back to the day calendar.(Monthly calendar mode)\n   * If explicitly set to month mode, it will only return the month value.\n   * Else it will change back to mode 0.\n   */\n\n  /**\n   * Clicking on a year in mode 2 will set the year and return back to monthly calendar. (Yearly calendar mode)\n   * If explicitly set to year mode, it will only return the year value.\n   * Else it will change back to mode 1.\n   */\n\n  /***************************************************************************************\n   * Renders the entire body of the calendar\n   * Alternate between day, month and year.\n   ***************************************************************************************/\n\n  /**\n   * Renders the regular calendar that can switch between day, month and year view.\n   */\n\n  /**\n   * Only render the month calendar and does not switch modes.\n   */\n\n  /**\n   * Only render the year calendar and does not switch modes.\n   */\n  //year={this.state.selectedDate}\n\n  /**\n   * Depending on the props given, renders the different modes.\n   */\n\n\n  createClass(Calendar, [{\n    key: \"render\",\n\n    /**\n     * Main render method\n     */\n    value: function render() {\n      return React.createElement(MuiThemeProvider, {\n        theme: this.props.light ? lightTheme : darkTheme\n      }, React.createElement(Paper, {\n        style: this.props.generalStyle\n      }, this.modeSelector()));\n    }\n  }]);\n  return Calendar;\n}(Component);\n\nexport default Calendar;","map":{"version":3,"sources":["../src/DisplayMonthlyCalendar.js","../src/DisplayDailyCalendar.js","../src/DisplayYearlyCalendar.js","../src/muitheme.js","../src/index.js"],"names":["DisplayMonthlyCalendar","today","Date","ifSameMonthCard","currentMonth","currentMonthCounter","months","id","rowsOfMonths","monthCounter","rowCounter","i","monthID","DisplayDailyCalendar","monthStart","dateFns","monthEnd","endOfMonth","startDate","eachWeek","day","end","formattedDate","weekNumber","cloneDay","isSameDay","DisplayYearlyCalendar","currentYearDateFNS","dateYearFormat","pastYears","addYears","props","year","futureYears","yearStart","parseInt","yearEnd","rowsOfYears","ifSameCurrentYearCard","currentYear","cloneCurrentYear","height","darkTheme","main","teal","orange","lightTheme","Calendar","state","renderHeader","dateMonthFormat","header","mode","pastFiveYears","nextFiveYears","renderYearHeader","modeChange","setState","onChevronClick","direction","yearChevronClick","onDateClick","onSetMonth","result","selectedDate","onYearClick","defaultDaySelector","textColor","light","body","monthSelector","yearSelector","modeSelector"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport dateFns from \"date-fns\";\r\n\r\nconst DisplayMonthlyCalendar = props => {\r\n  let today = new Date();\r\n  const currentMonth = dateFns.getMonth(today);\r\n\r\n  /**\r\n   * If the month being displayed is the same as current month, highlight it with a gray box.\r\n   * @param {*} currentMonthCounter\r\n   */\r\n  const ifSameMonthCard = currentMonthCounter => {\r\n    if (currentMonth === currentMonthCounter) {\r\n      return { backgroundColor: \"rgba(128,128,128,0.5)\", height: \"100%\" };\r\n    } else {\r\n      return { backgroundColor: \"rgba(0,0,0,0)\", height: \"100%\" };\r\n    }\r\n  };\r\n\r\n  const months = [\r\n    { id: 0, name: \"Jan\" },\r\n    { id: 1, name: \"Feb\" },\r\n    { id: 2, name: \"Mar\" },\r\n    { id: 3, name: \"Apr\" },\r\n    { id: 4, name: \"May\" },\r\n    { id: 5, name: \"Jun\" },\r\n    { id: 6, name: \"Jul\" },\r\n    { id: 7, name: \"Aug\" },\r\n    { id: 8, name: \"Sep\" },\r\n    { id: 9, name: \"Oct\" },\r\n    { id: 10, name: \"Nov\" },\r\n    { id: 11, name: \"Dec\" }\r\n  ];\r\n  let rowsOfMonths = [];\r\n  let rows = [];\r\n  let monthCounter = 0;\r\n  let rowCounter = 0;\r\n  while (monthCounter < 12) {\r\n    for (let i = 0; i < 3; i++) {\r\n      const monthID = months[monthCounter].id;\r\n      rowsOfMonths.push(\r\n        <TableCell key={monthID}>\r\n          <CardActionArea\r\n            onClick={() => props.onSetMonth(monthID)}\r\n            style={{ height: \"100%\" }}\r\n          >\r\n            <Card style={ifSameMonthCard(monthCounter)}>\r\n              <CardContent>\r\n                <Typography align=\"center\" style={props.textColor}>\r\n                  {months[monthCounter].name}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </CardActionArea>\r\n        </TableCell>\r\n      );\r\n      monthCounter += 1;\r\n    }\r\n    rows.push(\r\n      <TableRow key={rowCounter} style={{ height: \"25%\" }}>\r\n        {rowsOfMonths}\r\n      </TableRow>\r\n    );\r\n    rowsOfMonths = [];\r\n    rowCounter += 1;\r\n  }\r\n\r\n  return (\r\n    <Table style={{ height: \"90%\" }}>\r\n      <TableBody>{rows}</TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default DisplayMonthlyCalendar;\r\n","import React from \"react\";\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableCell,\r\n  TableRow,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport dateFns from \"date-fns\";\r\n\r\nconst DisplayDailyCalendar = props => {\r\n  const today = new Date();\r\n  const { selectedDate } = props;\r\n  const monthStart = dateFns.startOfMonth(selectedDate);\r\n  const monthEnd = dateFns.endOfMonth(monthStart);\r\n  const startDate = dateFns.startOfWeek(monthStart);\r\n  const endDate = dateFns.endOfWeek(monthEnd);\r\n\r\n  const weekdays = [\r\n    { id: 0, day: \"Sun\" },\r\n    { id: 1, day: \"Mon\" },\r\n    { id: 2, day: \"Tue\" },\r\n    { id: 3, day: \"Wed\" },\r\n    { id: 4, day: \"Thu\" },\r\n    { id: 5, day: \"Fri\" },\r\n    { id: 6, day: \"Sat\" }\r\n  ];\r\n\r\n  const eachWeek = [];\r\n  let daysOfWeek = [];\r\n\r\n  let day = startDate;\r\n  let end = endDate;\r\n  let formattedDate;\r\n  const dateFormat = \"D\";\r\n\r\n  let weekNumber = 1;\r\n  while (day <= end) {\r\n    for (let i = 0; i < 7; i++) {\r\n      formattedDate = dateFns.format(day, dateFormat);\r\n      const cloneDay = day;\r\n      daysOfWeek.push(\r\n        <TableCell key={formattedDate}>\r\n          <CardActionArea\r\n            onClick={() => props.onDateClick(dateFns.parse(cloneDay))}\r\n            style={{ height: \"100%\" }}\r\n          >\r\n            <Card\r\n              style={\r\n                dateFns.isSameDay(day, selectedDate)\r\n                  ? {\r\n                      backgroundColor: \"rgba(128,128,128,0.5)\",\r\n                      height: \"100%\"\r\n                    }\r\n                  : {\r\n                      backgroundColor: \"rgba(0,0,0,0)\",\r\n                      height: \"100%\"\r\n                    }\r\n              }\r\n            >\r\n              <CardContent>\r\n                {dateFns.isSameDay(day, today) ? (\r\n                  <Typography\r\n                    align=\"center\"\r\n                    color=\"primary\"\r\n                    style={{ fontSize: \"20px\" }}\r\n                  >\r\n                    {formattedDate}\r\n                  </Typography>\r\n                ) : (\r\n                  <Typography\r\n                    align=\"center\"\r\n                    style={\r\n                      dateFns.isSameMonth(day, monthStart)\r\n                        ? props.textColor\r\n                        : {\r\n                            color: \"rgba(128,128,128,1)\"\r\n                          }\r\n                    }\r\n                  >\r\n                    {formattedDate}\r\n                  </Typography>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </CardActionArea>\r\n        </TableCell>\r\n      );\r\n\r\n      day = dateFns.addDays(day, 1);\r\n    }\r\n\r\n    eachWeek.push(<TableRow key={weekNumber}>{daysOfWeek}</TableRow>);\r\n    daysOfWeek = [];\r\n    weekNumber += 1;\r\n  }\r\n  return (\r\n    <Table style={{ height: \"90%\" }}>\r\n      <TableHead>\r\n        <TableRow>\r\n          {weekdays.map(day => (\r\n            <TableCell key={day.id}>\r\n              <Typography align=\"center\">{day.day}</Typography>\r\n            </TableCell>\r\n          ))}\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>{eachWeek}</TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default DisplayDailyCalendar;\r\n","import React from \"react\";\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport dateFns from \"date-fns\";\r\n\r\nconst DisplayYearlyCalendar = props => {\r\n  let today = new Date();\r\n  const currentYearDateFNS = dateFns.getYear(today);\r\n  const dateYearFormat = \"YYYY\";\r\n  let pastYears = dateFns.addYears(props.year, -9);\r\n  let futureYears = dateFns.addYears(props.year, 2);\r\n  let yearStart = parseInt(dateFns.format(pastYears, dateYearFormat));\r\n  let yearEnd = parseInt(dateFns.format(futureYears, dateYearFormat));\r\n  let rowsOfYears = [];\r\n  let rows = [];\r\n  let rowCounter = 0;\r\n\r\n  /**\r\n   * If the month being displayed is the same as current month, highlight it with a gray box.\r\n   */\r\n  const ifSameCurrentYearCard = currentYearCounter => {\r\n    if (currentYearDateFNS === currentYearCounter) {\r\n      return { backgroundColor: \"rgba(128,128,128,0.5)\", height: \"100%\" };\r\n    } else {\r\n      return { backgroundColor: \"rgba(0,0,0,0)\", height: \"100%\" };\r\n    }\r\n  };\r\n\r\n  let currentYear = yearStart;\r\n  while (currentYear < yearEnd + 1) {\r\n    for (let i = 0; i < 3; i++) {\r\n      let cloneCurrentYear = currentYear;\r\n      rowsOfYears.push(\r\n        <TableCell key={currentYear}>\r\n          <CardActionArea\r\n            style={{ height: \"100%\" }}\r\n            onClick={() => props.onSetYear(cloneCurrentYear)}\r\n          >\r\n            <Card style={ifSameCurrentYearCard(cloneCurrentYear)}>\r\n              <CardContent>\r\n                <Typography align=\"center\" style={props.textColor}>\r\n                  {currentYear}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </CardActionArea>\r\n        </TableCell>\r\n      );\r\n      currentYear += 1;\r\n    }\r\n    rows.push(\r\n      <TableRow key={rowCounter} style={{ height: \"25%\" }}>\r\n        {rowsOfYears}\r\n      </TableRow>\r\n    );\r\n    rowsOfYears = [];\r\n    rowCounter += 1;\r\n  }\r\n\r\n  return (\r\n    <Table style={{ height: \"90%\" }}>\r\n      <TableBody>{rows}</TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default DisplayYearlyCalendar;\r\n","//Material theme\r\nimport { createMuiTheme } from \"@material-ui/core\";\r\nimport { teal, orange, red } from \"@material-ui/core/colors\";\r\n\r\nexport const darkTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  },\r\n  palette: {\r\n    primary: { main: teal[\"A100\"] },\r\n    secondary: { main: orange[\"A100\"], light: orange[500] },\r\n    caution: { main: red[500] },\r\n    type: \"dark\"\r\n  }\r\n});\r\n\r\nexport const lightTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  },\r\n  palette: {\r\n    primary: { main: teal[\"A100\"] },\r\n    secondary: { main: orange[\"A100\"], light: orange[500] },\r\n    caution: { main: red[500] },\r\n    type: \"light\"\r\n  }\r\n});\r\n\r\n//export default theme;\r\n","import React, { Component } from \"react\";\nimport { Paper, Button, Typography, IconButton } from \"@material-ui/core\";\nimport dateFns from \"date-fns\";\nimport ChevronLeftRounded from \"@material-ui/icons/ChevronLeftRounded\";\nimport ChevronRightRounded from \"@material-ui/icons/ChevronRightRounded\";\nimport DisplayMonthlyCalendar from \"./DisplayMonthlyCalendar\";\nimport DisplayDailyCalendar from \"./DisplayDailyCalendar\";\nimport DailyYearlyCalendar from \"./DisplayYearlyCalendar\";\n\n//Material theme\nimport { MuiThemeProvider } from \"@material-ui/core\";\nimport { darkTheme, lightTheme } from \"./muitheme\";\n\nexport default class Calendar extends Component {\n  state = {\n    selectedDate: new Date(),\n    selectedMonth: new Date(),\n    mode: 0,\n    showFunctionalHeader: true,\n    selectStartandEnd: false,\n    selected1: null,\n    selected2: null,\n    functionalMode: false\n  };\n\n  /***************************************************************************************\n   * Calender Header functions\n   ***************************************************************************************/\n\n  /**\n   * Depending on the mode, the calendar header will render different text.\n   */\n  renderHeader = () => {\n    const dateYearFormat = \"YYYY\";\n    const dateMonthFormat = \"MMMM YYYY\";\n    let header;\n    if (this.state.mode === 0) {\n      header = (\n        <Typography variant=\"h5\" inline={true}>\n          {dateFns.format(this.state.selectedDate, dateMonthFormat)}\n        </Typography>\n      );\n    } else if (this.state.mode === 1) {\n      header = (\n        <Typography variant=\"h5\" inline={true}>\n          {dateFns.format(this.state.selectedDate, dateYearFormat)}\n        </Typography>\n      );\n    } else {\n      const pastFiveYears = dateFns.addYears(this.state.selectedDate, -9);\n      const nextFiveYears = dateFns.addYears(this.state.selectedDate, 2);\n      header = (\n        <Typography variant=\"h5\" inline={true}>\n          {dateFns.format(pastFiveYears, dateYearFormat)} -{\" \"}\n          {dateFns.format(nextFiveYears, dateYearFormat)}\n        </Typography>\n      );\n    }\n\n    return (\n      <Paper\n        style={{\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }}\n      >\n        <IconButton onClick={() => this.onChevronClick(true)}>\n          <ChevronLeftRounded />\n        </IconButton>\n        <Button onClick={this.modeChange}>{header}</Button>\n        <IconButton onClick={() => this.onChevronClick(false)}>\n          <ChevronRightRounded />\n        </IconButton>\n      </Paper>\n    );\n  };\n\n  /**\n   * Render the header but without mode change.\n   */\n  renderYearHeader = () => {\n    const dateYearFormat = \"YYYY\";\n    let header;\n\n    const pastFiveYears = dateFns.addYears(this.state.selectedDate, -9);\n    const nextFiveYears = dateFns.addYears(this.state.selectedDate, 2);\n    header = (\n      <Typography variant=\"h5\" inline={true}>\n        {dateFns.format(pastFiveYears, dateYearFormat)} -{\" \"}\n        {dateFns.format(nextFiveYears, dateYearFormat)}\n      </Typography>\n    );\n\n    return (\n      <Paper\n        style={{\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }}\n      >\n        <IconButton onClick={() => this.yearChevronClick(true)}>\n          <ChevronLeftRounded />\n        </IconButton>\n        {header}\n        <IconButton onClick={() => this.yearChevronClick(false)}>\n          <ChevronRightRounded />\n        </IconButton>\n      </Paper>\n    );\n  };\n\n  /*\n   * Clicking on the header will change the mode between days, months and years.\n   */\n  modeChange = () => {\n    if (this.state.mode === 0) {\n      this.setState({ mode: 1 });\n    } else if (this.state.mode === 1) {\n      this.setState({ mode: 2, selectedDate: new Date() });\n    } else {\n      this.setState({ mode: 0, selectedDate: new Date() });\n    }\n  };\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n  onChevronClick = direction => {\n    if (direction) {\n      if (this.state.mode === 0) {\n        this.setState({\n          selectedDate: dateFns.addMonths(this.state.selectedDate, -1)\n        });\n      } else if (this.state.mode === 1) {\n        this.setState({\n          selectedDate: dateFns.addYears(this.state.selectedDate, -1)\n        });\n      } else {\n        this.setState({\n          selectedDate: dateFns.addYears(this.state.selectedDate, -9)\n        });\n      }\n    } else {\n      if (this.state.mode === 0) {\n        this.setState({\n          selectedDate: dateFns.addMonths(this.state.selectedDate, 1)\n        });\n      } else if (this.state.mode === 1) {\n        this.setState({\n          selectedDate: dateFns.addYears(this.state.selectedDate, 1)\n        });\n      } else {\n        this.setState({\n          selectedDate: dateFns.addYears(this.state.selectedDate, 9)\n        });\n      }\n    }\n  };\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n  yearChevronClick = direction => {\n    if (direction) {\n      this.setState({\n        selectedDate: dateFns.addYears(this.state.selectedDate, -9)\n      });\n    } else {\n      this.setState({\n        selectedDate: dateFns.addYears(this.state.selectedDate, 9)\n      });\n    }\n  };\n\n  /***************************************************************************************\n   * Calendar functions (on click)\n   ***************************************************************************************/\n\n  /**\n   * Clicking on a date in mode 0 (Day calendar mode)\n   */\n  onDateClick = day => {\n    this.setState({\n      selectedDate: day\n    });\n\n    //This is for returning date when publishing\n    if (\n      this.props.selection !== undefined &&\n      this.props.mode !== \"month\" &&\n      this.props.mode !== \"year\"\n    ) {\n      this.props.selection(day);\n    }\n  };\n\n  /**\n   * Clicking on a month in mode 1 will set the month and return back to the day calendar.(Monthly calendar mode)\n   * If explicitly set to month mode, it will only return the month value.\n   * Else it will change back to mode 0.\n   */\n  onSetMonth = value => {\n    if (this.props.selection !== undefined && this.props.mode === \"month\") {\n      this.props.selection(value);\n    } else {\n      var result = dateFns.setMonth(this.state.selectedDate, value);\n      this.setState({ selectedDate: result, mode: 0 });\n    }\n  };\n\n  /**\n   * Clicking on a year in mode 2 will set the year and return back to monthly calendar. (Yearly calendar mode)\n   * If explicitly set to year mode, it will only return the year value.\n   * Else it will change back to mode 1.\n   */\n  onYearClick = value => {\n    if (this.props.selection !== undefined && this.props.mode === \"year\") {\n      this.props.selection(value);\n    } else {\n      this.setState({\n        mode: 1,\n        selectedDate: dateFns.setYear(this.state.selectedDate, value)\n      });\n    }\n  };\n\n  /***************************************************************************************\n   * Renders the entire body of the calendar\n   * Alternate between day, month and year.\n   ***************************************************************************************/\n\n  /**\n   * Renders the regular calendar that can switch between day, month and year view.\n   */\n  defaultDaySelector = () => {\n    let textColor;\n    if (this.props.light) {\n      textColor = { color: \"rgba(0,0,0,1)\" };\n    } else {\n      textColor = { color: \"rgba(256,256,256,1)\" };\n    }\n    let body;\n    if (this.state.mode === 0) {\n      body = (\n        <DisplayDailyCalendar\n          selectedDate={this.state.selectedDate}\n          onDateClick={this.onDateClick}\n          light={textColor}\n        />\n      );\n    } else if (this.state.mode === 1) {\n      body = (\n        <DisplayMonthlyCalendar\n          onSetMonth={this.onSetMonth}\n          light={textColor}\n        />\n      );\n    } else {\n      body = (\n        <DailyYearlyCalendar\n          year={this.state.selectedDate}\n          onSetYear={this.onYearClick}\n          light={textColor}\n        />\n      );\n    }\n\n    return (\n      <div style={{ height: \"100%\" }}>\n        {this.renderHeader()}\n        {body}\n      </div>\n    );\n  };\n\n  /**\n   * Only render the month calendar and does not switch modes.\n   */\n  monthSelector = () => {\n    let textColor;\n    if (this.props.light) {\n      textColor = { color: \"rgba(0,0,0,1)\" };\n    } else {\n      textColor = { color: \"rgba(256,256,256,1)\" };\n    }\n    return (\n      <DisplayMonthlyCalendar onSetMonth={this.onSetMonth} light={textColor} />\n    );\n  };\n\n  /**\n   * Only render the year calendar and does not switch modes.\n   */\n  yearSelector = () => {\n    let textColor;\n    if (this.props.light) {\n      textColor = { color: \"rgba(0,0,0,1)\" };\n    } else {\n      textColor = { color: \"rgba(256,256,256,1)\" };\n    }\n    return (\n      <div style={{ height: \"100%\" }}>\n        {this.renderYearHeader()}\n        <DailyYearlyCalendar\n          year={this.state.selectedDate}\n          onSetYear={this.onYearClick}\n          light={textColor}\n        />\n      </div>\n    );\n  };\n  //year={this.state.selectedDate}\n  /**\n   * Depending on the props given, renders the different modes.\n   */\n  modeSelector = () => {\n    if (this.props.mode === \"year\") {\n      return this.yearSelector();\n    } else if (this.props.mode === \"month\") {\n      return this.monthSelector();\n    } else {\n      return this.defaultDaySelector();\n    }\n  };\n  /**\n   * Main render method\n   */\n  render() {\n    return (\n      <MuiThemeProvider theme={this.props.light ? lightTheme : darkTheme}>\n        <Paper style={this.props.generalStyle}>{this.modeSelector()}</Paper>\n      </MuiThemeProvider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}