{"ast":null,"code":"import React, { Component } from 'react';\nimport { Typography, Table, TableBody, TableCell, TableRow, Card, CardActionArea, CardContent, TableHead, createMuiTheme, Paper, Button, IconButton, MuiThemeProvider } from '@material-ui/core';\nimport getMonth from 'date-fns/getMonth';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport format from 'date-fns/format';\nimport parse from 'date-fns/parse';\nimport isSameDay from 'date-fns/isSameDay';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport addDays from 'date-fns/addDays';\nimport getYear from 'date-fns/getYear';\nimport addYears from 'date-fns/addYears';\nimport addMonths from 'date-fns/addMonths';\nimport setMonth from 'date-fns/setMonth';\nimport setYear from 'date-fns/setYear';\nimport { teal, orange, red } from '@material-ui/core/colors';\nimport ChevronLeftRounded from '@material-ui/icons/ChevronLeftRounded';\nimport ChevronRightRounded from '@material-ui/icons/ChevronRightRounded';\n\nvar DisplayMonthlyCalendar = function DisplayMonthlyCalendar(props) {\n  var today = new Date();\n  var currentMonth = getMonth(today);\n  /**\r\n   * If the month being displayed is the same as current month, highlight it with a gray box.\r\n   * @param {*} currentMonthCounter\r\n   */\n\n  var ifSameMonthCard = function ifSameMonthCard(currentMonthCounter) {\n    if (currentMonth === currentMonthCounter) {\n      return {\n        backgroundColor: \"rgba(128,128,128,0.5)\",\n        height: \"100%\"\n      };\n    } else {\n      return {\n        backgroundColor: \"rgba(0,0,0,0)\",\n        height: \"100%\"\n      };\n    }\n  };\n\n  var months = [{\n    id: 0,\n    name: \"Jan\"\n  }, {\n    id: 1,\n    name: \"Feb\"\n  }, {\n    id: 2,\n    name: \"Mar\"\n  }, {\n    id: 3,\n    name: \"Apr\"\n  }, {\n    id: 4,\n    name: \"May\"\n  }, {\n    id: 5,\n    name: \"Jun\"\n  }, {\n    id: 6,\n    name: \"Jul\"\n  }, {\n    id: 7,\n    name: \"Aug\"\n  }, {\n    id: 8,\n    name: \"Sep\"\n  }, {\n    id: 9,\n    name: \"Oct\"\n  }, {\n    id: 10,\n    name: \"Nov\"\n  }, {\n    id: 11,\n    name: \"Dec\"\n  }];\n  var rowsOfMonths = [];\n  var rows = [];\n  var monthCounter = 0;\n  var rowCounter = 0;\n\n  while (monthCounter < 12) {\n    var _loop = function _loop(i) {\n      var monthID = months[monthCounter].id;\n      rowsOfMonths.push(React.createElement(TableCell, {\n        key: monthID\n      }, React.createElement(CardActionArea, {\n        onClick: function onClick() {\n          return props.onSetMonth(monthID);\n        },\n        style: {\n          height: \"100%\"\n        }\n      }, React.createElement(Card, {\n        style: ifSameMonthCard(monthCounter)\n      }, React.createElement(CardContent, null, React.createElement(Typography, {\n        align: \"center\",\n        style: props.textColor\n      }, months[monthCounter].name))))));\n      monthCounter += 1;\n    };\n\n    for (var i = 0; i < 3; i++) {\n      _loop(i);\n    }\n\n    rows.push(React.createElement(TableRow, {\n      key: rowCounter,\n      style: {\n        height: \"25%\"\n      }\n    }, rowsOfMonths));\n    rowsOfMonths = [];\n    rowCounter += 1;\n  }\n\n  return React.createElement(Table, {\n    style: {\n      height: \"90%\"\n    }\n  }, React.createElement(TableBody, null, rows));\n};\n\nvar DisplayDailyCalendar = function DisplayDailyCalendar(props) {\n  var today = new Date();\n  var selectedDate = props.selectedDate;\n  var monthStart = startOfMonth(selectedDate);\n  var monthEnd = endOfMonth(monthStart);\n  var startDate = startOfWeek(monthStart);\n  var endDate = endOfWeek(monthEnd);\n  var weekdays = [{\n    id: 0,\n    day: \"Sun\"\n  }, {\n    id: 1,\n    day: \"Mon\"\n  }, {\n    id: 2,\n    day: \"Tue\"\n  }, {\n    id: 3,\n    day: \"Wed\"\n  }, {\n    id: 4,\n    day: \"Thu\"\n  }, {\n    id: 5,\n    day: \"Fri\"\n  }, {\n    id: 6,\n    day: \"Sat\"\n  }];\n  var eachWeek = [];\n  var daysOfWeek = [];\n  var day = startDate;\n  var end = endDate;\n  var formattedDate = void 0;\n  var dateFormat = \"D\";\n  var weekNumber = 1;\n\n  while (day <= end) {\n    var _loop = function _loop(i) {\n      formattedDate = format(day, dateFormat);\n      var cloneDay = day;\n      daysOfWeek.push(React.createElement(TableCell, {\n        key: formattedDate\n      }, React.createElement(CardActionArea, {\n        onClick: function onClick() {\n          return props.onDateClick(parse(cloneDay));\n        },\n        style: {\n          height: \"100%\"\n        }\n      }, React.createElement(Card, {\n        style: isSameDay(day, selectedDate) ? {\n          backgroundColor: \"rgba(128,128,128,0.5)\",\n          height: \"100%\"\n        } : {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          height: \"100%\"\n        }\n      }, React.createElement(CardContent, null, isSameDay(day, today) ? React.createElement(Typography, {\n        align: \"center\",\n        color: \"primary\",\n        style: {\n          fontSize: \"20px\"\n        }\n      }, formattedDate) : React.createElement(Typography, {\n        align: \"center\",\n        style: isSameMonth(day, monthStart) ? props.textColor : {\n          color: \"rgba(128,128,128,1)\"\n        }\n      }, formattedDate))))));\n      day = addDays(day, 1);\n    };\n\n    for (var i = 0; i < 7; i++) {\n      _loop(i);\n    }\n\n    eachWeek.push(React.createElement(TableRow, {\n      key: weekNumber\n    }, daysOfWeek));\n    daysOfWeek = [];\n    weekNumber += 1;\n  }\n\n  return React.createElement(Table, {\n    style: {\n      height: \"90%\"\n    }\n  }, React.createElement(TableHead, null, React.createElement(TableRow, null, weekdays.map(function (day) {\n    return React.createElement(TableCell, {\n      key: day.id\n    }, React.createElement(Typography, {\n      align: \"center\"\n    }, day.day));\n  }))), React.createElement(TableBody, null, eachWeek));\n};\n\nvar DisplayYearlyCalendar = function DisplayYearlyCalendar(props) {\n  var today = new Date();\n  var currentYearDateFNS = getYear(today);\n  var dateYearFormat = \"yyyy\";\n  var pastYears = addYears(props.year, -9);\n  var futureYears = addYears(props.year, 2);\n  var yearStart = parseInt(format(pastYears, dateYearFormat));\n  var yearEnd = parseInt(format(futureYears, dateYearFormat));\n  var rowsOfYears = [];\n  var rows = [];\n  var rowCounter = 0;\n  /**\r\n   * If the month being displayed is the same as current month, highlight it with a gray box.\r\n   */\n\n  var ifSameCurrentYearCard = function ifSameCurrentYearCard(currentYearCounter) {\n    if (currentYearDateFNS === currentYearCounter) {\n      return {\n        backgroundColor: \"rgba(128,128,128,0.5)\",\n        height: \"100%\"\n      };\n    } else {\n      return {\n        backgroundColor: \"rgba(0,0,0,0)\",\n        height: \"100%\"\n      };\n    }\n  };\n\n  var currentYear = yearStart;\n\n  while (currentYear < yearEnd + 1) {\n    var _loop = function _loop(i) {\n      var cloneCurrentYear = currentYear;\n      rowsOfYears.push(React.createElement(TableCell, {\n        key: currentYear\n      }, React.createElement(CardActionArea, {\n        style: {\n          height: \"100%\"\n        },\n        onClick: function onClick() {\n          return props.onSetYear(cloneCurrentYear);\n        }\n      }, React.createElement(Card, {\n        style: ifSameCurrentYearCard(cloneCurrentYear)\n      }, React.createElement(CardContent, null, React.createElement(Typography, {\n        align: \"center\",\n        style: props.textColor\n      }, currentYear))))));\n      currentYear += 1;\n    };\n\n    for (var i = 0; i < 3; i++) {\n      _loop(i);\n    }\n\n    rows.push(React.createElement(TableRow, {\n      key: rowCounter,\n      style: {\n        height: \"25%\"\n      }\n    }, rowsOfYears));\n    rowsOfYears = [];\n    rowCounter += 1;\n  }\n\n  return React.createElement(Table, {\n    style: {\n      height: \"90%\"\n    }\n  }, React.createElement(TableBody, null, rows));\n}; //Material theme\n\n\nvar darkTheme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: {\n      main: teal[\"A100\"]\n    },\n    secondary: {\n      main: orange[\"A100\"],\n      light: orange[500]\n    },\n    caution: {\n      main: red[500]\n    },\n    type: \"dark\"\n  }\n});\nvar lightTheme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: {\n      main: teal[\"A100\"]\n    },\n    secondary: {\n      main: orange[\"A100\"],\n      light: orange[500]\n    },\n    caution: {\n      main: red[500]\n    },\n    type: \"light\"\n  }\n}); //export default theme;\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar Calendar = function (_Component) {\n  inherits(Calendar, _Component);\n\n  function Calendar() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, Calendar);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      selectedDate: new Date(),\n      selectedMonth: new Date(),\n      mode: 0,\n      showFunctionalHeader: true,\n      selectStartandEnd: false,\n      selected1: null,\n      selected2: null,\n      functionalMode: false\n    }, _this.renderHeader = function () {\n      var dateYearFormat = \"yyyy\";\n      var dateMonthFormat = \"MMMM yyyy\";\n      var header = void 0;\n\n      if (_this.state.mode === 0) {\n        header = React.createElement(Typography, {\n          variant: \"h5\",\n          inline: true\n        }, format(_this.state.selectedDate, dateMonthFormat));\n      } else if (_this.state.mode === 1) {\n        header = React.createElement(Typography, {\n          variant: \"h5\",\n          inline: true\n        }, format(_this.state.selectedDate, dateYearFormat));\n      } else {\n        var pastFiveYears = addYears(_this.state.selectedDate, -9);\n        var nextFiveYears = addYears(_this.state.selectedDate, 2);\n        header = React.createElement(Typography, {\n          variant: \"h5\",\n          inline: true\n        }, format(pastFiveYears, dateYearFormat), \" -\", \" \", format(nextFiveYears, dateYearFormat));\n      }\n\n      return React.createElement(Paper, {\n        style: {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }\n      }, React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.onChevronClick(true);\n        }\n      }, React.createElement(ChevronLeftRounded, null)), React.createElement(Button, {\n        onClick: _this.modeChange\n      }, header), React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.onChevronClick(false);\n        }\n      }, React.createElement(ChevronRightRounded, null)));\n    }, _this.renderYearHeader = function () {\n      var dateYearFormat = \"yyyy\";\n      var header = void 0;\n      var pastFiveYears = addYears(_this.state.selectedDate, -9);\n      var nextFiveYears = addYears(_this.state.selectedDate, 2);\n      header = React.createElement(Typography, {\n        variant: \"h5\",\n        inline: true\n      }, format(pastFiveYears, dateYearFormat), \" -\", \" \", format(nextFiveYears, dateYearFormat));\n      return React.createElement(Paper, {\n        style: {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }\n      }, React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.yearChevronClick(true);\n        }\n      }, React.createElement(ChevronLeftRounded, null)), header, React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.yearChevronClick(false);\n        }\n      }, React.createElement(ChevronRightRounded, null)));\n    }, _this.modeChange = function () {\n      if (_this.state.mode === 0) {\n        _this.setState({\n          mode: 1\n        });\n      } else if (_this.state.mode === 1) {\n        _this.setState({\n          mode: 2,\n          selectedDate: new Date()\n        });\n      } else {\n        _this.setState({\n          mode: 0,\n          selectedDate: new Date()\n        });\n      }\n    }, _this.onChevronClick = function (direction) {\n      if (direction) {\n        if (_this.state.mode === 0) {\n          _this.setState({\n            selectedDate: addMonths(_this.state.selectedDate, -1)\n          });\n        } else if (_this.state.mode === 1) {\n          _this.setState({\n            selectedDate: addYears(_this.state.selectedDate, -1)\n          });\n        } else {\n          _this.setState({\n            selectedDate: addYears(_this.state.selectedDate, -9)\n          });\n        }\n      } else {\n        if (_this.state.mode === 0) {\n          _this.setState({\n            selectedDate: addMonths(_this.state.selectedDate, 1)\n          });\n        } else if (_this.state.mode === 1) {\n          _this.setState({\n            selectedDate: addYears(_this.state.selectedDate, 1)\n          });\n        } else {\n          _this.setState({\n            selectedDate: addYears(_this.state.selectedDate, 9)\n          });\n        }\n      }\n    }, _this.yearChevronClick = function (direction) {\n      if (direction) {\n        _this.setState({\n          selectedDate: addYears(_this.state.selectedDate, -9)\n        });\n      } else {\n        _this.setState({\n          selectedDate: addYears(_this.state.selectedDate, 9)\n        });\n      }\n    }, _this.onDateClick = function (day) {\n      _this.setState({\n        selectedDate: day\n      }); //This is for returning date when publishing\n\n\n      if (_this.props.selection !== undefined && _this.props.mode !== \"month\" && _this.props.mode !== \"year\") {\n        _this.props.selection(day);\n      }\n    }, _this.onSetMonth = function (value) {\n      if (_this.props.selection !== undefined && _this.props.mode === \"month\") {\n        _this.props.selection(value);\n      } else {\n        var result = setMonth(_this.state.selectedDate, value);\n\n        _this.setState({\n          selectedDate: result,\n          mode: 0\n        });\n      }\n    }, _this.onYearClick = function (value) {\n      if (_this.props.selection !== undefined && _this.props.mode === \"year\") {\n        _this.props.selection(value);\n      } else {\n        _this.setState({\n          mode: 1,\n          selectedDate: setYear(_this.state.selectedDate, value)\n        });\n      }\n    }, _this.defaultDaySelector = function () {\n      var textColor = void 0;\n\n      if (_this.props.light) {\n        textColor = {\n          color: \"rgba(0,0,0,1)\"\n        };\n      } else {\n        textColor = {\n          color: \"rgba(256,256,256,1)\"\n        };\n      }\n\n      var body = void 0;\n\n      if (_this.state.mode === 0) {\n        body = React.createElement(DisplayDailyCalendar, {\n          selectedDate: _this.state.selectedDate,\n          onDateClick: _this.onDateClick,\n          light: textColor\n        });\n      } else if (_this.state.mode === 1) {\n        body = React.createElement(DisplayMonthlyCalendar, {\n          onSetMonth: _this.onSetMonth,\n          light: textColor\n        });\n      } else {\n        body = React.createElement(DisplayYearlyCalendar, {\n          year: _this.state.selectedDate,\n          onSetYear: _this.onYearClick,\n          light: textColor\n        });\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        }\n      }, _this.renderHeader(), body);\n    }, _this.monthSelector = function () {\n      var textColor = void 0;\n\n      if (_this.props.light) {\n        textColor = {\n          color: \"rgba(0,0,0,1)\"\n        };\n      } else {\n        textColor = {\n          color: \"rgba(256,256,256,1)\"\n        };\n      }\n\n      return React.createElement(DisplayMonthlyCalendar, {\n        onSetMonth: _this.onSetMonth,\n        light: textColor\n      });\n    }, _this.yearSelector = function () {\n      var textColor = void 0;\n\n      if (_this.props.light) {\n        textColor = {\n          color: \"rgba(0,0,0,1)\"\n        };\n      } else {\n        textColor = {\n          color: \"rgba(256,256,256,1)\"\n        };\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        }\n      }, _this.renderYearHeader(), React.createElement(DisplayYearlyCalendar, {\n        year: _this.state.selectedDate,\n        onSetYear: _this.onYearClick,\n        light: textColor\n      }));\n    }, _this.modeSelector = function () {\n      if (_this.props.mode === \"year\") {\n        return _this.yearSelector();\n      } else if (_this.props.mode === \"month\") {\n        return _this.monthSelector();\n      } else {\n        return _this.defaultDaySelector();\n      }\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n  /***************************************************************************************\n   * Calender Header functions\n   ***************************************************************************************/\n\n  /**\n   * Depending on the mode, the calendar header will render different text.\n   */\n\n  /**\n   * Render the header but without mode change.\n   */\n\n  /*\n   * Clicking on the header will change the mode between days, months and years.\n   */\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n\n  /***************************************************************************************\n   * Calendar functions (on click)\n   ***************************************************************************************/\n\n  /**\n   * Clicking on a date in mode 0 (Day calendar mode)\n   */\n\n  /**\n   * Clicking on a month in mode 1 will set the month and return back to the day calendar.(Monthly calendar mode)\n   * If explicitly set to month mode, it will only return the month value.\n   * Else it will change back to mode 0.\n   */\n\n  /**\n   * Clicking on a year in mode 2 will set the year and return back to monthly calendar. (Yearly calendar mode)\n   * If explicitly set to year mode, it will only return the year value.\n   * Else it will change back to mode 1.\n   */\n\n  /***************************************************************************************\n   * Renders the entire body of the calendar\n   * Alternate between day, month and year.\n   ***************************************************************************************/\n\n  /**\n   * Renders the regular calendar that can switch between day, month and year view.\n   */\n\n  /**\n   * Only render the month calendar and does not switch modes.\n   */\n\n  /**\n   * Only render the year calendar and does not switch modes.\n   */\n  //year={this.state.selectedDate}\n\n  /**\n   * Depending on the props given, renders the different modes.\n   */\n\n\n  createClass(Calendar, [{\n    key: \"render\",\n\n    /**\n     * Main render method\n     */\n    value: function render() {\n      return React.createElement(MuiThemeProvider, {\n        theme: this.props.light ? lightTheme : darkTheme\n      }, React.createElement(Paper, {\n        style: this.props.generalStyle\n      }, this.modeSelector()));\n    }\n  }]);\n  return Calendar;\n}(Component);\n\nexport default Calendar;","map":{"version":3,"sources":["../src/DisplayMonthlyCalendar.js","../src/DisplayDailyCalendar.js","../src/DisplayYearlyCalendar.js","../src/muitheme.js","../src/index.js"],"names":["DisplayMonthlyCalendar","today","currentMonth","ifSameMonthCard","months","rowsOfMonths","rows","monthCounter","i","rowCounter","DisplayDailyCalendar","selectedDate","monthEnd","startDate","weekdays","eachWeek","daysOfWeek","dateFns","push","formattedDate","addDays","weekNumber","id","DisplayYearlyCalendar","currentYearDateFNS","dateYearFormat","futureYears","yearStart","ifSameCurrentYearCard","currentYear","cloneCurrentYear","darkTheme","lightTheme","Calendar","state","format","dateMonthFormat","pastFiveYears","nextFiveYears","yearChevronClick","modeChange","setState","onChevronClick","direction","addYears","day","selection","onSetMonth","result","onYearClick","value","color","body","textColor","height","renderHeader","monthSelector","light","yearSelector","props","modeSelector","defaultDaySelector"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport dateFns from \"date-fns\";\r\n\r\nconst DisplayMonthlyCalendar = props => {\r\n  let today = new Date();\r\n  const currentMonth = dateFns.getMonth(today);\r\n\r\n  /**\r\n   * If the month being displayed is the same as current month, highlight it with a gray box.\r\n   * @param {*} currentMonthCounter\r\n   */\r\n  const ifSameMonthCard = currentMonthCounter => {\r\n    if (currentMonth === currentMonthCounter) {\r\n      return { backgroundColor: \"rgba(128,128,128,0.5)\", height: \"100%\" };\r\n    } else {\r\n      return { backgroundColor: \"rgba(0,0,0,0)\", height: \"100%\" };\r\n    }\r\n  };\r\n\r\n  const months = [\r\n    { id: 0, name: \"Jan\" },\r\n    { id: 1, name: \"Feb\" },\r\n    { id: 2, name: \"Mar\" },\r\n    { id: 3, name: \"Apr\" },\r\n    { id: 4, name: \"May\" },\r\n    { id: 5, name: \"Jun\" },\r\n    { id: 6, name: \"Jul\" },\r\n    { id: 7, name: \"Aug\" },\r\n    { id: 8, name: \"Sep\" },\r\n    { id: 9, name: \"Oct\" },\r\n    { id: 10, name: \"Nov\" },\r\n    { id: 11, name: \"Dec\" }\r\n  ];\r\n  let rowsOfMonths = [];\r\n  let rows = [];\r\n  let monthCounter = 0;\r\n  let rowCounter = 0;\r\n  while (monthCounter < 12) {\r\n    for (let i = 0; i < 3; i++) {\r\n      const monthID = months[monthCounter].id;\r\n      rowsOfMonths.push(\r\n        <TableCell key={monthID}>\r\n          <CardActionArea\r\n            onClick={() => props.onSetMonth(monthID)}\r\n            style={{ height: \"100%\" }}\r\n          >\r\n            <Card style={ifSameMonthCard(monthCounter)}>\r\n              <CardContent>\r\n                <Typography align=\"center\" style={props.textColor}>\r\n                  {months[monthCounter].name}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </CardActionArea>\r\n        </TableCell>\r\n      );\r\n      monthCounter += 1;\r\n    }\r\n    rows.push(\r\n      <TableRow key={rowCounter} style={{ height: \"25%\" }}>\r\n        {rowsOfMonths}\r\n      </TableRow>\r\n    );\r\n    rowsOfMonths = [];\r\n    rowCounter += 1;\r\n  }\r\n\r\n  return (\r\n    <Table style={{ height: \"90%\" }}>\r\n      <TableBody>{rows}</TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default DisplayMonthlyCalendar;\r\n","import React from \"react\";\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableCell,\r\n  TableRow,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport dateFns from \"date-fns\";\r\n\r\nconst DisplayDailyCalendar = props => {\r\n  const today = new Date();\r\n  const { selectedDate } = props;\r\n  const monthStart = dateFns.startOfMonth(selectedDate);\r\n  const monthEnd = dateFns.endOfMonth(monthStart);\r\n  const startDate = dateFns.startOfWeek(monthStart);\r\n  const endDate = dateFns.endOfWeek(monthEnd);\r\n\r\n  const weekdays = [\r\n    { id: 0, day: \"Sun\" },\r\n    { id: 1, day: \"Mon\" },\r\n    { id: 2, day: \"Tue\" },\r\n    { id: 3, day: \"Wed\" },\r\n    { id: 4, day: \"Thu\" },\r\n    { id: 5, day: \"Fri\" },\r\n    { id: 6, day: \"Sat\" }\r\n  ];\r\n\r\n  const eachWeek = [];\r\n  let daysOfWeek = [];\r\n\r\n  let day = startDate;\r\n  let end = endDate;\r\n  let formattedDate;\r\n  const dateFormat = \"D\";\r\n\r\n  let weekNumber = 1;\r\n  while (day <= end) {\r\n    for (let i = 0; i < 7; i++) {\r\n      formattedDate = dateFns.format(day, dateFormat);\r\n      const cloneDay = day;\r\n      daysOfWeek.push(\r\n        <TableCell key={formattedDate}>\r\n          <CardActionArea\r\n            onClick={() => props.onDateClick(dateFns.parse(cloneDay))}\r\n            style={{ height: \"100%\" }}\r\n          >\r\n            <Card\r\n              style={\r\n                dateFns.isSameDay(day, selectedDate)\r\n                  ? {\r\n                      backgroundColor: \"rgba(128,128,128,0.5)\",\r\n                      height: \"100%\"\r\n                    }\r\n                  : {\r\n                      backgroundColor: \"rgba(0,0,0,0)\",\r\n                      height: \"100%\"\r\n                    }\r\n              }\r\n            >\r\n              <CardContent>\r\n                {dateFns.isSameDay(day, today) ? (\r\n                  <Typography\r\n                    align=\"center\"\r\n                    color=\"primary\"\r\n                    style={{ fontSize: \"20px\" }}\r\n                  >\r\n                    {formattedDate}\r\n                  </Typography>\r\n                ) : (\r\n                  <Typography\r\n                    align=\"center\"\r\n                    style={\r\n                      dateFns.isSameMonth(day, monthStart)\r\n                        ? props.textColor\r\n                        : {\r\n                            color: \"rgba(128,128,128,1)\"\r\n                          }\r\n                    }\r\n                  >\r\n                    {formattedDate}\r\n                  </Typography>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </CardActionArea>\r\n        </TableCell>\r\n      );\r\n\r\n      day = dateFns.addDays(day, 1);\r\n    }\r\n\r\n    eachWeek.push(<TableRow key={weekNumber}>{daysOfWeek}</TableRow>);\r\n    daysOfWeek = [];\r\n    weekNumber += 1;\r\n  }\r\n  return (\r\n    <Table style={{ height: \"90%\" }}>\r\n      <TableHead>\r\n        <TableRow>\r\n          {weekdays.map(day => (\r\n            <TableCell key={day.id}>\r\n              <Typography align=\"center\">{day.day}</Typography>\r\n            </TableCell>\r\n          ))}\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>{eachWeek}</TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default DisplayDailyCalendar;\r\n","import React from \"react\";\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport dateFns from \"date-fns\";\r\n\r\nconst DisplayYearlyCalendar = props => {\r\n  let today = new Date();\r\n  const currentYearDateFNS = dateFns.getYear(today);\r\n  const dateYearFormat = \"YYYY\";\r\n  let pastYears = dateFns.addYears(props.year, -9);\r\n  let futureYears = dateFns.addYears(props.year, 2);\r\n  let yearStart = parseInt(dateFns.format(pastYears, dateYearFormat));\r\n  let yearEnd = parseInt(dateFns.format(futureYears, dateYearFormat));\r\n  let rowsOfYears = [];\r\n  let rows = [];\r\n  let rowCounter = 0;\r\n\r\n  /**\r\n   * If the month being displayed is the same as current month, highlight it with a gray box.\r\n   */\r\n  const ifSameCurrentYearCard = currentYearCounter => {\r\n    if (currentYearDateFNS === currentYearCounter) {\r\n      return { backgroundColor: \"rgba(128,128,128,0.5)\", height: \"100%\" };\r\n    } else {\r\n      return { backgroundColor: \"rgba(0,0,0,0)\", height: \"100%\" };\r\n    }\r\n  };\r\n\r\n  let currentYear = yearStart;\r\n  while (currentYear < yearEnd + 1) {\r\n    for (let i = 0; i < 3; i++) {\r\n      let cloneCurrentYear = currentYear;\r\n      rowsOfYears.push(\r\n        <TableCell key={currentYear}>\r\n          <CardActionArea\r\n            style={{ height: \"100%\" }}\r\n            onClick={() => props.onSetYear(cloneCurrentYear)}\r\n          >\r\n            <Card style={ifSameCurrentYearCard(cloneCurrentYear)}>\r\n              <CardContent>\r\n                <Typography align=\"center\" style={props.textColor}>\r\n                  {currentYear}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </CardActionArea>\r\n        </TableCell>\r\n      );\r\n      currentYear += 1;\r\n    }\r\n    rows.push(\r\n      <TableRow key={rowCounter} style={{ height: \"25%\" }}>\r\n        {rowsOfYears}\r\n      </TableRow>\r\n    );\r\n    rowsOfYears = [];\r\n    rowCounter += 1;\r\n  }\r\n\r\n  return (\r\n    <Table style={{ height: \"90%\" }}>\r\n      <TableBody>{rows}</TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default DisplayYearlyCalendar;\r\n","//Material theme\r\nimport { createMuiTheme } from \"@material-ui/core\";\r\nimport { teal, orange, red } from \"@material-ui/core/colors\";\r\n\r\nexport const darkTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  },\r\n  palette: {\r\n    primary: { main: teal[\"A100\"] },\r\n    secondary: { main: orange[\"A100\"], light: orange[500] },\r\n    caution: { main: red[500] },\r\n    type: \"dark\"\r\n  }\r\n});\r\n\r\nexport const lightTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  },\r\n  palette: {\r\n    primary: { main: teal[\"A100\"] },\r\n    secondary: { main: orange[\"A100\"], light: orange[500] },\r\n    caution: { main: red[500] },\r\n    type: \"light\"\r\n  }\r\n});\r\n\r\n//export default theme;\r\n","import React, { Component } from \"react\";\nimport { Paper, Button, Typography, IconButton } from \"@material-ui/core\";\nimport dateFns from \"date-fns\";\nimport ChevronLeftRounded from \"@material-ui/icons/ChevronLeftRounded\";\nimport ChevronRightRounded from \"@material-ui/icons/ChevronRightRounded\";\nimport DisplayMonthlyCalendar from \"./DisplayMonthlyCalendar\";\nimport DisplayDailyCalendar from \"./DisplayDailyCalendar\";\nimport DailyYearlyCalendar from \"./DisplayYearlyCalendar\";\n\n//Material theme\nimport { MuiThemeProvider } from \"@material-ui/core\";\nimport { darkTheme, lightTheme } from \"./muitheme\";\n\nexport default class Calendar extends Component {\n  state = {\n    selectedDate: new Date(),\n    selectedMonth: new Date(),\n    mode: 0,\n    showFunctionalHeader: true,\n    selectStartandEnd: false,\n    selected1: null,\n    selected2: null,\n    functionalMode: false\n  };\n\n  /***************************************************************************************\n   * Calender Header functions\n   ***************************************************************************************/\n\n  /**\n   * Depending on the mode, the calendar header will render different text.\n   */\n  renderHeader = () => {\n    const dateYearFormat = \"YYYY\";\n    const dateMonthFormat = \"MMMM YYYY\";\n    let header;\n    if (this.state.mode === 0) {\n      header = (\n        <Typography variant=\"h5\" inline={true}>\n          {dateFns.format(this.state.selectedDate, dateMonthFormat)}\n        </Typography>\n      );\n    } else if (this.state.mode === 1) {\n      header = (\n        <Typography variant=\"h5\" inline={true}>\n          {dateFns.format(this.state.selectedDate, dateYearFormat)}\n        </Typography>\n      );\n    } else {\n      const pastFiveYears = dateFns.addYears(this.state.selectedDate, -9);\n      const nextFiveYears = dateFns.addYears(this.state.selectedDate, 2);\n      header = (\n        <Typography variant=\"h5\" inline={true}>\n          {dateFns.format(pastFiveYears, dateYearFormat)} -{\" \"}\n          {dateFns.format(nextFiveYears, dateYearFormat)}\n        </Typography>\n      );\n    }\n\n    return (\n      <Paper\n        style={{\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }}\n      >\n        <IconButton onClick={() => this.onChevronClick(true)}>\n          <ChevronLeftRounded />\n        </IconButton>\n        <Button onClick={this.modeChange}>{header}</Button>\n        <IconButton onClick={() => this.onChevronClick(false)}>\n          <ChevronRightRounded />\n        </IconButton>\n      </Paper>\n    );\n  };\n\n  /**\n   * Render the header but without mode change.\n   */\n  renderYearHeader = () => {\n    const dateYearFormat = \"YYYY\";\n    let header;\n\n    const pastFiveYears = dateFns.addYears(this.state.selectedDate, -9);\n    const nextFiveYears = dateFns.addYears(this.state.selectedDate, 2);\n    header = (\n      <Typography variant=\"h5\" inline={true}>\n        {dateFns.format(pastFiveYears, dateYearFormat)} -{\" \"}\n        {dateFns.format(nextFiveYears, dateYearFormat)}\n      </Typography>\n    );\n\n    return (\n      <Paper\n        style={{\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }}\n      >\n        <IconButton onClick={() => this.yearChevronClick(true)}>\n          <ChevronLeftRounded />\n        </IconButton>\n        {header}\n        <IconButton onClick={() => this.yearChevronClick(false)}>\n          <ChevronRightRounded />\n        </IconButton>\n      </Paper>\n    );\n  };\n\n  /*\n   * Clicking on the header will change the mode between days, months and years.\n   */\n  modeChange = () => {\n    if (this.state.mode === 0) {\n      this.setState({ mode: 1 });\n    } else if (this.state.mode === 1) {\n      this.setState({ mode: 2, selectedDate: new Date() });\n    } else {\n      this.setState({ mode: 0, selectedDate: new Date() });\n    }\n  };\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n  onChevronClick = direction => {\n    if (direction) {\n      if (this.state.mode === 0) {\n        this.setState({\n          selectedDate: dateFns.addMonths(this.state.selectedDate, -1)\n        });\n      } else if (this.state.mode === 1) {\n        this.setState({\n          selectedDate: dateFns.addYears(this.state.selectedDate, -1)\n        });\n      } else {\n        this.setState({\n          selectedDate: dateFns.addYears(this.state.selectedDate, -9)\n        });\n      }\n    } else {\n      if (this.state.mode === 0) {\n        this.setState({\n          selectedDate: dateFns.addMonths(this.state.selectedDate, 1)\n        });\n      } else if (this.state.mode === 1) {\n        this.setState({\n          selectedDate: dateFns.addYears(this.state.selectedDate, 1)\n        });\n      } else {\n        this.setState({\n          selectedDate: dateFns.addYears(this.state.selectedDate, 9)\n        });\n      }\n    }\n  };\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n  yearChevronClick = direction => {\n    if (direction) {\n      this.setState({\n        selectedDate: dateFns.addYears(this.state.selectedDate, -9)\n      });\n    } else {\n      this.setState({\n        selectedDate: dateFns.addYears(this.state.selectedDate, 9)\n      });\n    }\n  };\n\n  /***************************************************************************************\n   * Calendar functions (on click)\n   ***************************************************************************************/\n\n  /**\n   * Clicking on a date in mode 0 (Day calendar mode)\n   */\n  onDateClick = day => {\n    this.setState({\n      selectedDate: day\n    });\n\n    //This is for returning date when publishing\n    if (\n      this.props.selection !== undefined &&\n      this.props.mode !== \"month\" &&\n      this.props.mode !== \"year\"\n    ) {\n      this.props.selection(day);\n    }\n  };\n\n  /**\n   * Clicking on a month in mode 1 will set the month and return back to the day calendar.(Monthly calendar mode)\n   * If explicitly set to month mode, it will only return the month value.\n   * Else it will change back to mode 0.\n   */\n  onSetMonth = value => {\n    if (this.props.selection !== undefined && this.props.mode === \"month\") {\n      this.props.selection(value);\n    } else {\n      var result = dateFns.setMonth(this.state.selectedDate, value);\n      this.setState({ selectedDate: result, mode: 0 });\n    }\n  };\n\n  /**\n   * Clicking on a year in mode 2 will set the year and return back to monthly calendar. (Yearly calendar mode)\n   * If explicitly set to year mode, it will only return the year value.\n   * Else it will change back to mode 1.\n   */\n  onYearClick = value => {\n    if (this.props.selection !== undefined && this.props.mode === \"year\") {\n      this.props.selection(value);\n    } else {\n      this.setState({\n        mode: 1,\n        selectedDate: dateFns.setYear(this.state.selectedDate, value)\n      });\n    }\n  };\n\n  /***************************************************************************************\n   * Renders the entire body of the calendar\n   * Alternate between day, month and year.\n   ***************************************************************************************/\n\n  /**\n   * Renders the regular calendar that can switch between day, month and year view.\n   */\n  defaultDaySelector = () => {\n    let textColor;\n    if (this.props.light) {\n      textColor = { color: \"rgba(0,0,0,1)\" };\n    } else {\n      textColor = { color: \"rgba(256,256,256,1)\" };\n    }\n    let body;\n    if (this.state.mode === 0) {\n      body = (\n        <DisplayDailyCalendar\n          selectedDate={this.state.selectedDate}\n          onDateClick={this.onDateClick}\n          light={textColor}\n        />\n      );\n    } else if (this.state.mode === 1) {\n      body = (\n        <DisplayMonthlyCalendar\n          onSetMonth={this.onSetMonth}\n          light={textColor}\n        />\n      );\n    } else {\n      body = (\n        <DailyYearlyCalendar\n          year={this.state.selectedDate}\n          onSetYear={this.onYearClick}\n          light={textColor}\n        />\n      );\n    }\n\n    return (\n      <div style={{ height: \"100%\" }}>\n        {this.renderHeader()}\n        {body}\n      </div>\n    );\n  };\n\n  /**\n   * Only render the month calendar and does not switch modes.\n   */\n  monthSelector = () => {\n    let textColor;\n    if (this.props.light) {\n      textColor = { color: \"rgba(0,0,0,1)\" };\n    } else {\n      textColor = { color: \"rgba(256,256,256,1)\" };\n    }\n    return (\n      <DisplayMonthlyCalendar onSetMonth={this.onSetMonth} light={textColor} />\n    );\n  };\n\n  /**\n   * Only render the year calendar and does not switch modes.\n   */\n  yearSelector = () => {\n    let textColor;\n    if (this.props.light) {\n      textColor = { color: \"rgba(0,0,0,1)\" };\n    } else {\n      textColor = { color: \"rgba(256,256,256,1)\" };\n    }\n    return (\n      <div style={{ height: \"100%\" }}>\n        {this.renderYearHeader()}\n        <DailyYearlyCalendar\n          year={this.state.selectedDate}\n          onSetYear={this.onYearClick}\n          light={textColor}\n        />\n      </div>\n    );\n  };\n  //year={this.state.selectedDate}\n  /**\n   * Depending on the props given, renders the different modes.\n   */\n  modeSelector = () => {\n    if (this.props.mode === \"year\") {\n      return this.yearSelector();\n    } else if (this.props.mode === \"month\") {\n      return this.monthSelector();\n    } else {\n      return this.defaultDaySelector();\n    }\n  };\n  /**\n   * Main render method\n   */\n  render() {\n    return (\n      <MuiThemeProvider theme={this.props.light ? lightTheme : darkTheme}>\n        <Paper style={this.props.generalStyle}>{this.modeSelector()}</Paper>\n      </MuiThemeProvider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}